use_r("snap_functions")
usethis::use_r("snap_functions")
library(devtools)
library(roxygen2)
library(usethis)
R.version
use_r("calc_ANPPt_max")
use_r("calc_ANPPt_est")
calc_ANPPt_max = function(RAIN, SAND) {
ANPPt_max = (0.84*RAIN - 27.5)*(1.33 - 0.0075*SAND)
return(ANPPt_max)
}
calc_ANPPt_max(400, 40)
calc_ANPPt_est = function(GI, ANPPt_max, LAI_expcoef = 0.015) {
Pl = 0.6 + (0.24*GI)
LAI = (Pl/0.6) - ( LAI_expcoef * exp(4.6*GI) )
ANPPt_est = LAI * ANPPt_max
return(ANPPt_est)
}
calc_ANPPt_est(0.3, 317)
use_r("calc_BNPPt_est")
use_r("calc_PDSOCt")
calc_BNPPt_est = function(RAIN) {
BNPPt_est = 917.4 - (0.763*RAIN)
return(BNPPt_est)
}
calc_BNPPt_est(400)
calc_PDSOCt = function(ANPPt_est, BNPPt_est, LIGCELL, GI, Fire) {
PDSOCt = 0.45 * ( (LIGCELL*ANPPt_est*(1-GI)*(1-Fire)) + (LIGCELL+0.05)*BNPPt_est )
return(PDSOCt)
}
calc_PDSOCt(336, 612, 0.5, 0.3, 0.2)
use_r("calc_DDSOCt")
calc_DDSOCt = function(ANPPt_est, LIGCELL, GI) {
DDSOCt = LIGCELL * 0.45 * GI * ANPPt_est
return(DDSOCt)
}
calc_DDSOCt(336, 0.5, 0.3)
use_r("calc_SOCeq")
calc_SOCeq = function(PDSOCt, DDSOCt, SAND, RAIN) {
WETDAYS = 240 * ( (0.00044*RAIN) - 0.025)
RESPcorrection = 0.7 + (0.3 * (SAND/100))
SOCeq = (PDSOCt + DDSOCt + (WETDAYS*0.579*RESPcorrection) ) / ( 0.00044*WETDAYS*RESPcorrection )
return(SOCeq)
}
calc_SOCeq(194, 22, 40, 400)
use_r("SNAP")
install()
browse_github_pat()
create_github_token()
library(devtools)
library(roxygen2)
library(usethis)
use_r("calc_St")
use_r("calc_SE")
use_r("calc_LG")
calc_Lg = function(D, d, n, W = NA, Cg = NA) {
if(is.numeric(Cg)) {
Cg = Cg
} else if(is.numeric(W)) {
Cg = 2*(5300+770*ln(W))
} else {print("You need to either provide Cg (daily consumption) or W (animal body size)")}
Lg = D*d*Cg*n*10^(-4)
return(Lg)
}
calc_Lg(40, 0.5, 2, 300)
?ln()
?log()
calc_Lg = function(D, d, n, W = NA, Cg = NA) {
if(is.numeric(Cg)) {
Cg = Cg
} else if(is.numeric(W)) {
Cg = 2*(5300+770*log(W))
} else {print("You need to either provide Cg (daily consumption) or W (animal body size)")}
Lg = D*d*Cg*n*10^(-4)
return(Lg)
}
calc_Lg(40, 0.5, 2, 300)
calc_Lg(40, 0.5, 2, Cg = 300)
calc_Lg(40, 0.5, 2)
use_r("calc_Sg")
use_r("calc_Sf")
use_r("calc_Pg")
??use_r
library(usethis)
use_r("calc_Pg")
install.packages("usethis")
library(usethis)
use_r("calc_dmax")
use_r("calc_Lo")
use_r("SNAPGRAZE")
pkgs <- c("devtools", "roxygen2")
install.packages(pkgs)
library(roxygen2)
library(devtools)
document()
install()
usethis::use_package_doc()
devtools::document()
package?SNAPGRAZEr
package?SNAPGRAZE
file.exists("~/.ssh/id_rsa.pub")
devtools::install_github("ruan-de-wet/SNAPGRAZEr")
mylist = as.list(c(1,2,3))
i <- 1
x <- mylist[[i]]
new_element <- as.list(x^2)
print(new_element)
mylist = union(mylist, new_element)
i <- i+1
x <- mylist[[i]]
if(x<10){
new_element <- as.list(x^2)
print(new_element)
mylist = union(mylist, new_element)
i <- i+1
} else {
break
}
x <- mylist[[i]]
if(x<10){
new_element <- as.list(x^2)
print(new_element)
mylist = union(mylist, new_element)
i <- i+1
} else {
break
}
x <- mylist[[i]]
if(x<10){
new_element <- as.list(x^2)
print(new_element)
mylist = union(mylist, new_element)
i <- i+1
} else {
break
}
x <- mylist[[i]]
if(x<10){
new_element <- as.list(x^2)
print(new_element)
mylist = union(mylist, new_element)
i <- i+1
} else {
break
}
years = 20f
years = 20
mylist = 1:years
mylist = as.list(c(1,2,3))
i <- 1
while(TRUE){
x <- mylist[[i]]
if(x<10){
new_element <- as.list(x^2)
print(new_element)
mylist = union(mylist, new_element)
i <- i+1
} else {
break
}
}
View(mylist)
mylist = vector("list", n = years)
mylist = vector("list", years)
SOC = 4000
mylist[[1]] <- SOC
calc_deltaSOC = function(PDSOCt, DDSOCt, SAND, RAIN, Gdays, SOC, lowSOC = FALSE) {
WETDAYS = (0.00044*RAIN-0.025)*Gdays
MRESP = WETDAYS*(0.7+(0.3*SAND/100))*(0.00044*SOC-0.579)
if(lowSOC) {
MRESPt = (WETDAYS*(0.7+(0.3*SAND/100)))*(exp(-10.872)*SOC^1.296)
} else {
MRESPt = (WETDAYS*(0.7+(0.3*SAND/100)))*(0.00044*SOC-0.579)
}
deltaSOC = PDSOCt+DDSOCt-MRESPt
return(deltaSOC)
}
PDSOCt = 34
DDSOCt=2
SAND=65
RAIN=360
Gdays=153
SOC=4000
lowSOC = FALSE
mylist = vector("list", years)
mylist[[1]] <- SOC
i <- 1
while(TRUE){
x <- mylist[[i]]
if(x<=years){
deltaSOC = calc_deltaSOC(PDSOCt, DDSOCt, SAND, RAIN, Gdays, SOC = x, lowSOC)
# SOC stock at the end of year i
SOCi =  as.list(x+deltaSOC)
mylist = union(mylist, SOCi)
i <- i+1
} else {
break
}
}
deltaSOC = calc_deltaSOC(PDSOCt, DDSOCt, SAND, RAIN, Gdays, SOC = x, lowSOC)
# SOC stock at the end of year i
SOCi =  as.list(x+deltaSOC)
mylist = union(mylist, SOCi)
mylist = vector("list", years)
mylist[[1]] <- SOC
i <- 1
while(TRUE){
x <- mylist[[i]]
if(x<=years){
deltaSOC = calc_deltaSOC(PDSOCt, DDSOCt, SAND, RAIN, Gdays, SOC = x, lowSOC)
# SOC stock at the end of year i
SOCi =  x+deltaSOC
i <- i+1
mylist[[i]] <- SOCi
} else {
break
}
}
deltaSOC = calc_deltaSOC(PDSOCt, DDSOCt, SAND, RAIN, Gdays, SOC = x, lowSOC)
# SOC stock at the end of year i
SOCi =  x+deltaSOC
i <- i+1
mylist[[i]] <- SOCi
mylist = vector("list", years)
mylist[[1]] <- SOC
for(i in 1:years){
deltaSOC = calc_deltaSOC(PDSOCt, DDSOCt, SAND, RAIN, Gdays, SOC = x, lowSOC)
# SOC stock at the end of year i
SOCi =  x+deltaSOC
i <- i+1
mylist[[i]] <- SOCi
}
mylist = vector("list", years)
mylist[[1]] <- SOC
for(i in 1:years){
x <- mylist[[i]]
deltaSOC = calc_deltaSOC(PDSOCt, DDSOCt, SAND, RAIN, Gdays, SOC = x, lowSOC)
# SOC stock at the end of year i
SOCi =  x+deltaSOC
i <- i+1
mylist[[i]] <- SOCi
}
268/1000
268/1000
.26/20
mylist[[years]]
mylist = vector("list", years)
mylist[[1]] <- SOC
for(i in 1:years){
x <- mylist[[i]]
deltaSOC = calc_deltaSOC(PDSOCt, DDSOCt, SAND, RAIN, Gdays, SOC = x, lowSOC)
# SOC stock at the end of year i
SOCi =  x+deltaSOC
i <- i+1
mylist[[i]] <- SOCi
}
mylist[[years+1]]
calc_Sg = function(Sk, Se, Lg, Ddays, n, d, r, W = NA, Cg = NA) {
if(is.numeric(Cg)) {
Cg = Cg
} else if(is.numeric(W)) {
Cg = (5300+770*log(W))
} else {print("You need to either provide Cg (daily consumption) or W (animal body size)")}
g = (d*Cg*n*10^(-4))/Se
Sg = (Sk*Se)/(Sk*exp(-(r-g)*Ddays)+Se*(1-exp(-(r-g)*Ddays)))-Lg
if(Sg < 0){
stop("ERROR: Ending biomass is negative. Grazing intensity exceeds forage production.")
} else{
return(Sg)
}
}
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
SOC = 3000
exp(-10.872)*SOC^1.296
exp(-10.872+(1.296*log(SOC)))
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
SNAPGRAZEr::calc_ANPPmax(RAIN = 350, MAT = 24, SAND = 50)
SNAPGRAZEr::calc_ANPPmax(RAIN = 350, MAT = 24, SAND = 70)
SNAPGRAZEr::calc_ANPPmax(RAIN = 350, MAT = 24, SAND = 70)/.9
devtools::document()
RAIN = 200
WETDAYS = (0.00044*RAIN-0.025)*Gdays
Gdays = 153
WETDAYS = (0.00044*RAIN-0.025)*Gdays
RAIN = 330
WETDAYS = (0.00044*RAIN-0.025)*Gdays
SNAPGRAZEr::calc_ANPPmax(RAIN = 200, MAT = 23.9, SAND = 80)
SNAPGRAZEr::calc_ANPPmax(RAIN = 330, MAT = 23.9, SAND = 80)
(0.602*RAIN-0.00038*RAIN^2+5.88*MAT)
MAT = 23.9
(0.602*RAIN-0.00038*RAIN^2+5.88*MAT)
RAIN = 200
(0.602*RAIN-0.00038*RAIN^2+5.88*MAT)
Sk = 96
remove.packages("SNAPGRAZEr")
devtools::install_github("kanedan29/SNAPGRAZEr")
RAIN <- 338
i <- 2f
i <- 2
RAIN <- RAIN[[i]]
type(RAIN)
typeof(RAINf)
typeof(RAIN)
RAIN <- c(1,2)
typeof(RAIN)
RAIN <- list(1,2)
typeof(RAIN)
RAIN <- vector(mode = "numeric", length = 12)
typeof(RAIN)
is.vector(RAINf)
is.vector(RAIN)
RAIN <- 1
is.vector(RAIN)
class(RAIN)
RAIN <- vector(mode = "numeric", length = 12)
class(RAIN)
len(RAIN)
length(RAIN)
RAIN <- list(1,2)
RAIN[1]
RAIN <- RAIN[i]
RAINf
RAIN
as.numeric(RAINf)
as.numeric(RAINf
as.numeric(RAIN
as.numeric(RAIN)
RAIN <- c(1,2)
RAIN <- as.numeric(RAIN[i])
if(length(RAIN) > 1){
RAIN <- as.numeric(RAIN[i])
}else{
RAIN
}
RAIN <- c(1,2)
if(length(RAIN) > 1){
RAIN <- as.numeric(RAIN[i])
}else{
RAIN
}
RAIN <- list(1,2)
if(length(RAIN) > 1){
RAIN <- as.numeric(RAIN[i])
}else{
RAIN
}
RAIN <- 1
if(length(RAIN) > 1){
RAIN <- as.numeric(RAIN[i])
}else{
RAIN
}
RAIN <- c(1,2)
RAIN[[]]
RAIN[[1]]
test_input <- function(x){
if(length(x) > 1){
x <- x[[i]]
}else{
x
}
}
test_input(RAIN)
RAIN <- test_input(RAIN)
RAIN <- c(1,2)
MAT <- c(1,2)
lapply(list(RAIN, MAT), FUN = test_input)
