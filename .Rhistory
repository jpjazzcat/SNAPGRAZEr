DdaysO_i <- test_input(DdaysO)
d_i <- test_input(d)
d_off_i <- test_input(d_off)
n_i <- test_input(n)
APCcorrection_i <- test_input(APCcorrection)
if(is.na(Sk)){
Sk_i = calc_ANPPmax(RAIN_i, MAT_i, SAND)/0.9
}else{
Sk_i = Sk
}
if(is.na(S0)){
S0_i = Sk_i*0.1
}else{
S0_i = S0
}
if(is.na(Gdays)){
Gdays_i = calc_Gdays(RAIN_i, MAT_i)
}else{
Gdays_i = Gdays
}
if(Edays_i + Ddays_i > Gdays_i){
stop("ERROR: Edays + Ddays must be <= Gdays")
} else if (Gdays_i > 365){
stop("ERROR: Gdays must be <= 365")
}
if(is.na(DdaysO)){
DdaysO_i = (365 - Gdays_i)
}else{
DdaysO_i = DdaysO
}
if(DdaysO_i < 0|DdaysO_i > 365){
stop("ERROR: DdaysO must be between 0 and 365")
} else if(DdaysO_i + Gdays_i > 365){
stop("ERROR: DdaysO + Gdays must be <= 365")
}
if(is.na(Cg)) {
Cg = (5300+770*log(W))
}
if(is.na(Co)) {
Co = Cg/2
}
# Episodic Herbivory Model (EHM)
Se = calc_SE(Sk = Sk_i, Edays = Edays_i, S0 = S0_i, r)
Lg = calc_Lg(Ddays = Ddays_i, d = d_i, n = n_i, W, Cg)
Sg = calc_Sg(Sk = Sk_i, Se, Lg, Ddays = Ddays_i, n = n_i, d = d_i, r, W, Cg)
Fdays = calc_Fdays(Gdays = Gdays_i, Edays = Edays_i, Ddays = Ddays_i)
Sf = calc_Sf(Sk = Sk_i, Sg, r, Fdays)
Pg = calc_Pg(Se, Sg, Sf, Sk = Sk_i, S0 = S0_i)
Lo = calc_Lo(Cg, Co, Gdays = Gdays_i, DdaysO = DdaysO_i, d_off = d_off_i)
# dmax = calc_dmax(Sf, Sk, Cg, Gdays)
# if(dmax > d){
#   print("Looks like stocking density is greater than what is theoretically sustainable.")
#   } else {print("Stocking density A-O-K!")}
# Productivity
ANPPt_max = calc_ANPPmax(RAIN = RAIN_i, MAT = MAT_i, SAND)
ANPPt_est = calc_ANPPest(Se, Sg, Sf, Sk = Sk_i, S0 = S0_i)
BNPPt_est = calc_BNPPest(RAIN = RAIN_i, MAT = MAT_i, ANPPt_est, Sk = Sk_i, S0 = S0_i, APCcorrection = APCcorrection_i, DEPTH)
# SOC
PDSOCt = calc_PDSOCt(BNPPt_est, Sf, Lo, LIGCELL = LIGCELL_i, FIRE = FIRE_i)
DDSOCt = calc_DDSOCt(LIGCELL = LIGCELL_i, Ddays = Ddays_i, Cg, n = n_i, d = d_i, Lo)
x <- soc_list[[i]]
deltaSOC = calc_deltaSOC(PDSOCt, DDSOCt, SAND, RAIN = RAIN_i, Gdays = Gdays_i, SOC = x, orig=FALSE)
# SOC stock at the end of year i
SOCi_end =  x+deltaSOC
soc_list[[i+1]] <- SOCi_end
}
return(soc_list)
}
SNAPGRAZE_delta_ann(RAIN = rain_vec, SAND = 0.2, MAT = 10, FIRE = 0, LIGCELL = 0.4, Edays = 100, Ddays = 20, d = 0.5, d_off = 0.5, n = 4, W = 400, r = 0.05, SOC = 40, years = 30)
SNAPGRAZE_delta_ann = function(SAND, RAIN, MAT, FIRE, LIGCELL, years, SOC,
Sk = NA, S0 = NA, Edays, Ddays, Gdays = NA, DdaysO = NA, d, d_off,
n, W, Cg = NA, Co = NA, r, APCcorrection = FALSE, DEPTH = 30, orig = FALSE) {
soc_list = vector("list", (years+1))
soc_list[[1]] <- (SOC)
test_input <- function(x){
if(length(unlist(x)) > 1){
x <- unlist(x)[[i]]
}else{
x
}
}
for(i in 1:years){
RAIN_i <- test_input(RAIN)
MAT_i <- test_input(MAT)
FIRE_i <- test_input(FIRE)
LIGCELL_i <- test_input(LIGCELL)
Edays_i <- test_input(Edays)
Ddays_i <- test_input(Ddays)
DdaysO_i <- test_input(DdaysO)
d_i <- test_input(d)
d_off_i <- test_input(d_off)
n_i <- test_input(n)
APCcorrection_i <- test_input(APCcorrection)
if(SAND<0|SAND>1){
stop("ERROR: SAND must be between 0 and 1")
} else if(RAIN_i<0|RAIN_i>10000){
stop("ERROR: RAIN must be between 0 and 10000")
} else if(MAT < -20|MAT>40){
stop("ERROR: MAT must be between -20 and 40")
} else if(FIRE<0|FIRE>1){
stop("ERROR: FIRE must be between 0 and 1")
} else if(LIGCELL<0|LIGCELL>1){
stop("ERROR: LIGCELL must be between 0 and 1")
} else if(Edays<0|Edays>365){
stop("ERROR: Edays must be between 0 and 365")
} else if(Ddays<0|Ddays>365){
stop("ERROR: Ddays must be between 0 and 365")
} else if(d<0|d>100){
stop("ERROR: d must be between 0 and 100")
} else if(W<0|W>5000){
stop("ERROR: W must be between 0 and 5000")
} else if(r<=0|r>0.2){
stop("ERROR: r must be between 0 and 0.2")
} else if(APCcorrection<0|APCcorrection>1){
stop("ERROR: APCcorrection must be either TRUE, FALSE, or between 0 and 1")
} else if(DEPTH<0|DEPTH>200){
stop("ERROR: DEPTH must be between 0 and 200")
}
if(is.na(Sk)){
Sk_i = calc_ANPPmax(RAIN_i, MAT_i, SAND)/0.9
}else{
Sk_i = Sk
}
if(is.na(S0)){
S0_i = Sk_i*0.1
}else{
S0_i = S0
}
if(is.na(Gdays)){
Gdays_i = calc_Gdays(RAIN_i, MAT_i)
}else{
Gdays_i = Gdays
}
if(Edays_i + Ddays_i > Gdays_i){
stop("ERROR: Edays + Ddays must be <= Gdays")
} else if (Gdays_i > 365){
stop("ERROR: Gdays must be <= 365")
}
if(is.na(DdaysO)){
DdaysO_i = (365 - Gdays_i)
}else{
DdaysO_i = DdaysO
}
if(DdaysO_i < 0|DdaysO_i > 365){
stop("ERROR: DdaysO must be between 0 and 365")
} else if(DdaysO_i + Gdays_i > 365){
stop("ERROR: DdaysO + Gdays must be <= 365")
}
if(is.na(Cg)) {
Cg = (5300+770*log(W))
}
if(is.na(Co)) {
Co = Cg/2
}
# Episodic Herbivory Model (EHM)
Se = calc_SE(Sk = Sk_i, Edays = Edays_i, S0 = S0_i, r)
Lg = calc_Lg(Ddays = Ddays_i, d = d_i, n = n_i, W, Cg)
Sg = calc_Sg(Sk = Sk_i, Se, Lg, Ddays = Ddays_i, n = n_i, d = d_i, r, W, Cg)
Fdays = calc_Fdays(Gdays = Gdays_i, Edays = Edays_i, Ddays = Ddays_i)
Sf = calc_Sf(Sk = Sk_i, Sg, r, Fdays)
Pg = calc_Pg(Se, Sg, Sf, Sk = Sk_i, S0 = S0_i)
Lo = calc_Lo(Cg, Co, Gdays = Gdays_i, DdaysO = DdaysO_i, d_off = d_off_i)
# dmax = calc_dmax(Sf, Sk, Cg, Gdays)
# if(dmax > d){
#   print("Looks like stocking density is greater than what is theoretically sustainable.")
#   } else {print("Stocking density A-O-K!")}
# Productivity
ANPPt_max = calc_ANPPmax(RAIN = RAIN_i, MAT = MAT_i, SAND)
ANPPt_est = calc_ANPPest(Se, Sg, Sf, Sk = Sk_i, S0 = S0_i)
BNPPt_est = calc_BNPPest(RAIN = RAIN_i, MAT = MAT_i, ANPPt_est, Sk = Sk_i, S0 = S0_i, APCcorrection = APCcorrection_i, DEPTH)
# SOC
PDSOCt = calc_PDSOCt(BNPPt_est, Sf, Lo, LIGCELL = LIGCELL_i, FIRE = FIRE_i)
DDSOCt = calc_DDSOCt(LIGCELL = LIGCELL_i, Ddays = Ddays_i, Cg, n = n_i, d = d_i, Lo)
x <- soc_list[[i]]
deltaSOC = calc_deltaSOC(PDSOCt, DDSOCt, SAND, RAIN = RAIN_i, Gdays = Gdays_i, SOC = x, orig=FALSE)
# SOC stock at the end of year i
SOCi_end =  x+deltaSOC
soc_list[[i+1]] <- SOCi_end
}
return(soc_list)
}
SNAPGRAZE_delta_ann(RAIN = rain_vec, SAND = 0.2, MAT = 10, FIRE = 0, LIGCELL = 0.4, Edays = 100, Ddays = 20, d = 0.5, d_off = 0.5, n = 4, W = 400, r = 0.05, SOC = 40, years = 30)
SNAPGRAZE_delta = function(SAND, RAIN, MAT, FIRE, LIGCELL, years, SOC,
Sk = NA, S0 = 0.1*Sk, Edays, Ddays, Gdays = NA, DdaysO = NA, d, d_off,
n, W, Cg = NA, Co = NA, r, APCcorrection = FALSE, DEPTH = 30, orig = FALSE) {
if(SAND<0|SAND>1){
stop("ERROR: SAND must be between 0 and 1")
} else if(RAIN<0|RAIN>10000){
stop("ERROR: RAIN must be between 0 and 10000")
} else if(MAT < -20|MAT>40){
stop("ERROR: MAT must be between -20 and 40")
} else if(FIRE<0|FIRE>1){
stop("ERROR: FIRE must be between 0 and 1")
} else if(LIGCELL<0|LIGCELL>1){
stop("ERROR: LIGCELL must be between 0 and 1")
} else if(Edays<0|Edays>365){
stop("ERROR: Edays must be between 0 and 365")
} else if(Ddays<0|Ddays>365){
stop("ERROR: Ddays must be between 0 and 365")
} else if(d<0|d>100){
stop("ERROR: d must be between 0 and 100")
} else if(d_off<0|d_off>100){
stop("ERROR: d_off must be between 0 and 100")
} else if(W<0|W>5000){
stop("ERROR: W must be between 0 and 5000")
} else if(r<=0|r>0.2){
stop("ERROR: r must be between 0 and 0.2")
} else if(APCcorrection<0|APCcorrection>1){
stop("ERROR: APCcorrection must be either TRUE, FALSE, or between 0 and 1")
} else if(DEPTH<0|DEPTH>200){
stop("ERROR: DEPTH must be between 0 and 200")
}
if(is.na(Sk)){
Sk = calc_ANPPmax(RAIN, MAT,SAND)/0.9
}
if(is.na(Gdays)){
Gdays = calc_Gdays(RAIN, MAT)
}
if(Edays + Ddays > Gdays){
stop("ERROR: Edays + Ddays must be <= Gdays")
} else if (Gdays > 365){
stop("ERROR: Gdays must be <= 365")
}
if(is.na(DdaysO)){
DdaysO = (365 - Gdays)
}
if(DdaysO < 0 | DdaysO > 365){
stop("ERROR: DdaysO must be between 0 and 365")
} else if(DdaysO + Gdays > 365){
stop("ERROR: DdaysO + Gdays must be <= 365")
}
if(is.na(Cg)) {
Cg = calc_Cg(W)
}
if(is.na(Co)) {
Co = Cg/2
}
# Episodic Herbivory Model (EHM)
Se = calc_SE(Sk, Edays, S0, r)
Lg = calc_Lg(Ddays, d, n, W, Cg)
Sg = calc_Sg(Sk, Se, Lg, Ddays, n, d, r, W, Cg)
Fdays = calc_Fdays(Gdays, Edays, Ddays)
Sf = calc_Sf(Sk, Sg, r, Fdays)
Pg = calc_Pg(Se, Sg, Sf, Sk, S0)
Lo = calc_Lo(Cg, Co, Gdays, DdaysO, d_off)
# dmax = calc_dmax(Sf, Sk, Cg, Gdays)
# if(dmax > d){
#   print("Looks like stocking density is greater than what is theoretically sustainable.")
#   } else {print("Stocking density A-O-K!")}
# Productivity
ANPPt_max = calc_ANPPmax(RAIN, MAT, SAND)
ANPPt_est = calc_ANPPest(Se, Sg, Sf, Sk, S0)
BNPPt_est = calc_BNPPest(RAIN, MAT, ANPPt_est, Sk, S0, APCcorrection, DEPTH)
# SOC
PDSOCt = calc_PDSOCt(BNPPt_est, Sf, Lo, LIGCELL, FIRE)
DDSOCt = calc_DDSOCt(LIGCELL, Ddays, Cg, n, d, Lo)
soc_list = vector("list", years)
soc_list[[1]] <- (SOC) # Convert SOC from t/ha to g/m2
for(i in 1:years){
x <- soc_list[[i]]
deltaSOC = calc_deltaSOC(PDSOCt, DDSOCt, SAND, RAIN, Gdays, SOC = x, orig)
# SOC stock at the end of year i
SOCi =  x+deltaSOC
i <- i+1
soc_list[[i]] <- SOCi
}
return(soc_list)
}
SNAPGRAZE_delta_ann(RAIN = rain_vec, SAND = 0.2, MAT = 10, FIRE = 0, LIGCELL = 0.4, Edays = 100, Ddays = 20, d = 0.5, d_off = 0.5, n = 4, W = 400, r = 0.05, SOC = 40, years = 30)
mat_vec = rnorm(30, 10, 2)
SNAPGRAZE_delta_ann(RAIN = rain_vec, SAND = 0.2, MAT = mat_vec, FIRE = 0, LIGCELL = 0.4, Edays = 100, Ddays = 20, d = 0.5, d_off = 0.5, n = 4, W = 400, r = 0.05, SOC = 40, years = 30)
SNAPGRAZE_delta_ann(RAIN = rain_vec, SAND = 0.2, MAT = m10, FIRE = 0, LIGCELL = 0.4, Edays = 100, Ddays = 20, d = 0.5, d_off = 0.5, n = 4, W = 400, r = 0.05, SOC = 40, years = 30)
SNAPGRAZE_delta_ann(RAIN = rain_vec, SAND = 0.2, MAT = 10, FIRE = 0, LIGCELL = 0.4, Edays = 100, Ddays = 20, d = 0.5, d_off = 0.5, n = 4, W = 400, r = 0.05, SOC = 40, years = 30)
SNAPGRAZE_delta_ann = function(SAND, RAIN, MAT, FIRE, LIGCELL, years, SOC,
Sk = NA, S0 = NA, Edays, Ddays, Gdays = NA, DdaysO = NA, d, d_off,
n, W, Cg = NA, Co = NA, r, APCcorrection = FALSE, DEPTH = 30, orig = FALSE) {
soc_list = vector("list", (years+1))
soc_list[[1]] <- (SOC)
test_input <- function(x){
if(length(unlist(x)) > 1){
x <- unlist(x)[[i]]
}else{
x
}
}
for(i in 1:years){
RAIN_i <- test_input(RAIN)
MAT_i <- test_input(MAT)
FIRE_i <- test_input(FIRE)
LIGCELL_i <- test_input(LIGCELL)
Edays_i <- test_input(Edays)
Ddays_i <- test_input(Ddays)
DdaysO_i <- test_input(DdaysO)
d_i <- test_input(d)
d_off_i <- test_input(d_off)
n_i <- test_input(n)
APCcorrection_i <- test_input(APCcorrection)
if(SAND<0|SAND>1){
stop("ERROR: SAND must be between 0 and 1")
} else if(RAIN_i<0|RAIN_i>10000){
stop("ERROR: RAIN must be between 0 and 10000")
} else if(MAT_i < -20|MAT_i>40){
stop("ERROR: MAT must be between -20 and 40")
} else if(FIRE_i<0|FIRE_i>1){
stop("ERROR: FIRE must be between 0 and 1")
} else if(LIGCELL_i<0|LIGCELL_i>1){
stop("ERROR: LIGCELL must be between 0 and 1")
} else if(Edays_i<0|Edays_i>365){
stop("ERROR: Edays must be between 0 and 365")
} else if(Ddays_i<0|Ddays_i>365){
stop("ERROR: Ddays must be between 0 and 365")
} else if(d_i<0|d_i>100){
stop("ERROR: d must be between 0 and 100")
} else if(d_off_i<0|d_off_i>100){
stop("ERROR: d_off must be between 0 and 100")
} else if(W<0|W>5000){
stop("ERROR: W must be between 0 and 5000")
} else if(r<=0|r>0.2){
stop("ERROR: r must be between 0 and 0.2")
} else if(APCcorrection_i<0|APCcorrection_i>1){
stop("ERROR: APCcorrection must be either TRUE, FALSE, or between 0 and 1")
} else if(DEPTH<0|DEPTH>200){
stop("ERROR: DEPTH must be between 0 and 200")
}
if(is.na(Sk)){
Sk_i = calc_ANPPmax(RAIN_i, MAT_i, SAND)/0.9
}else{
Sk_i = Sk
}
if(is.na(S0)){
S0_i = Sk_i*0.1
}else{
S0_i = S0
}
if(is.na(Gdays)){
Gdays_i = calc_Gdays(RAIN_i, MAT_i)
}else{
Gdays_i = Gdays
}
if(Edays_i + Ddays_i > Gdays_i){
stop("ERROR: Edays + Ddays must be <= Gdays")
} else if (Gdays_i > 365){
stop("ERROR: Gdays must be <= 365")
}
if(is.na(DdaysO)){
DdaysO_i = (365 - Gdays_i)
}else{
DdaysO_i = DdaysO
}
if(DdaysO_i < 0|DdaysO_i > 365){
stop("ERROR: DdaysO must be between 0 and 365")
} else if(DdaysO_i + Gdays_i > 365){
stop("ERROR: DdaysO + Gdays must be <= 365")
}
if(is.na(Cg)) {
Cg = (5300+770*log(W))
}
if(is.na(Co)) {
Co = Cg/2
}
# Episodic Herbivory Model (EHM)
Se = calc_SE(Sk = Sk_i, Edays = Edays_i, S0 = S0_i, r)
Lg = calc_Lg(Ddays = Ddays_i, d = d_i, n = n_i, W, Cg)
Sg = calc_Sg(Sk = Sk_i, Se, Lg, Ddays = Ddays_i, n = n_i, d = d_i, r, W, Cg)
Fdays = calc_Fdays(Gdays = Gdays_i, Edays = Edays_i, Ddays = Ddays_i)
Sf = calc_Sf(Sk = Sk_i, Sg, r, Fdays)
Pg = calc_Pg(Se, Sg, Sf, Sk = Sk_i, S0 = S0_i)
Lo = calc_Lo(Cg, Co, Gdays = Gdays_i, DdaysO = DdaysO_i, d_off = d_off_i)
# dmax = calc_dmax(Sf, Sk, Cg, Gdays)
# if(dmax > d){
#   print("Looks like stocking density is greater than what is theoretically sustainable.")
#   } else {print("Stocking density A-O-K!")}
# Productivity
ANPPt_max = calc_ANPPmax(RAIN = RAIN_i, MAT = MAT_i, SAND)
ANPPt_est = calc_ANPPest(Se, Sg, Sf, Sk = Sk_i, S0 = S0_i)
BNPPt_est = calc_BNPPest(RAIN = RAIN_i, MAT = MAT_i, ANPPt_est, Sk = Sk_i, S0 = S0_i, APCcorrection = APCcorrection_i, DEPTH)
# SOC
PDSOCt = calc_PDSOCt(BNPPt_est, Sf, Lo, LIGCELL = LIGCELL_i, FIRE = FIRE_i)
DDSOCt = calc_DDSOCt(LIGCELL = LIGCELL_i, Ddays = Ddays_i, Cg, n = n_i, d = d_i, Lo)
x <- soc_list[[i]]
deltaSOC = calc_deltaSOC(PDSOCt, DDSOCt, SAND, RAIN = RAIN_i, Gdays = Gdays_i, SOC = x, orig=FALSE)
# SOC stock at the end of year i
SOCi_end =  x+deltaSOC
soc_list[[i+1]] <- SOCi_end
}
return(soc_list)
}
SNAPGRAZE_delta_ann(RAIN = rain_vec, SAND = 0.2, MAT = mat_vec, FIRE = 0, LIGCELL = 0.4, Edays = 100, Ddays = 20, d = 0.5, d_off = 0.5, n = 4, W = 400, r = 0.05, SOC = 40, years = 30)
SNAPGRAZE_delta(RAIN = 1000, SAND = 0.2, MAT = 10, FIRE = 0, LIGCELL = 0.4, Edays = 100, Ddays = 20, d = 0.5, d_off = 0.5, n = 4, W = 400, r = 0.05, SOC = 40, years = 30)
SNAPGRAZE(RAIN = 1000, SAND = 0.2, MAT = 10, FIRE = 0, LIGCELL = 0.4, Edays = 100, Ddays = 20, d = 0.5, d_off = 0.5, n = 4, W = 400, r = 0.05)
calc_Lg(Ddays = 100, d = 0.5,n = 1)
calc_Lg(Ddays = 100, d = 0.5,n = 1, Cg = 10000)
library(SNAPGRAZEr)
SNAPGRAZE_delta(SAND = 0.26, RAIN = 550, MAT = 18, FIRE = 0, LIGCELL = 0.45, years = 20, Sk = 600, Ddays = 0, DdaysO = 0, d = 0, d_off = 0, n = 1, W = 0, r = 0.05, DEPTH = 13)
SNAPGRAZE_delta(SAND = 0.26, RAIN = 550, MAT = 18, FIRE = 0, LIGCELL = 0.45, years = 20, Sk = 600, Ddays = 0, d = 0, d_off = 0, n = 1, W = 0, r = 0.05, DEPTH = 13)
SNAPGRAZE_delta(SAND = 0.26, RAIN = 550, MAT = 18, FIRE = 0, LIGCELL = 0.45, years = 20, Sk = 600, Edays = 10, Ddays = 0, d = 0, d_off = 0, n = 1, W = 0, r = 0.05, DEPTH = 13)
SNAPGRAZE_delta(SAND = 0.26, RAIN = 550, MAT = 18, FIRE = 0, LIGCELL = 0.45, years = 20, Sk = 600, Edays = 10, Ddays = 1, d = 10, d_off = 0, n = 1, W = 0, r = 0.05, DEPTH = 13)
?SNAPGRAZEr
remove.packages(SNAPGRAZEr)
library(devtools)
install_github("jpjazzcat/SNAPGRAZEr")
library(SNAPGRAZEr)
library(devtools)
install_github("jpjazzcat/SNAPGRAZEr")
library(SNAPGRAZEr)
calc_ANPPest(Se = 100, Sg = 50, Sf = 200, Sk = 300)
?SNAPGRAZE
SNAPGRAZE = function(SAND, RAIN, MAT, FIRE, LIGCELL,
Sk = NA, S0 = 0.1*Sk, Edays, Ddays, Gdays = NA, DdaysO = NA, d, d_off,
n, W, Cg = NA, Co = NA, r, APCcorrection = FALSE, DEPTH = 30, orig = FALSE) {
if(SAND<0|SAND>1){
stop("ERROR: SAND must be between 0 and 1")
} else if(RAIN<0|RAIN>10000){
stop("ERROR: RAIN must be between 0 and 10000")
} else if(MAT < -20|MAT>40){
stop("ERROR: MAT must be between -20 and 40")
} else if(FIRE<0|FIRE>1){
stop("ERROR: FIRE must be between 0 and 1")
} else if(LIGCELL<0|LIGCELL>1){
stop("ERROR: LIGCELL must be between 0 and 1")
} else if(Edays<0|Edays>365){
stop("ERROR: Edays must be between 0 and 365")
} else if(Ddays<0|Ddays>365){
stop("ERROR: Ddays must be between 0 and 365")
} else if(d<0|d>100){
stop("ERROR: d must be between 0 and 100")
} else if(d_off<0|d_off>100){
stop("ERROR: d_off must be between 0 and 100")
} else if(W<0|W>5000){
stop("ERROR: W must be between 0 and 5000")
} else if(r<=0|r>0.2){
stop("ERROR: r must be between 0 and 0.2")
} else if(APCcorrection<0|APCcorrection>1){
stop("ERROR: APCcorrection must be either TRUE, FALSE, or between 0 and 1")
} else if(DEPTH<0|DEPTH>200){
stop("ERROR: DEPTH must be between 0 and 200")
}
if(is.na(Sk)){
Sk = calc_ANPPmax(RAIN, MAT,SAND)/0.9
}
if(is.na(Gdays)){
Gdays = calc_Gdays(RAIN, MAT)
}
if(Edays + Ddays > Gdays){
stop("ERROR: Edays + Ddays must be <= Gdays")
} else if (Gdays > 365){
stop("ERROR: Gdays must be <= 365")
}
if(is.na(DdaysO)){
DdaysO = (365 - Gdays)
}
if(DdaysO < 0 | DdaysO > 365){
stop("ERROR: DdaysO must be between 0 and 365")
} else if(DdaysO + Gdays > 365){
stop("ERROR: DdaysO + Gdays must be <= 365")
}
if(is.na(Cg)) {
Cg = calc_Cg(W)
}
if(is.na(Co)) {
Co = Cg/2
}
# Episodic Herbivory Model (EHM)
Se = calc_SE(Sk, Edays, S0, r)
Lg = calc_Lg(Ddays, d, n, W, Cg)
Sg = calc_Sg(Sk, Se, Lg, Ddays, n, d, r, W, Cg)
Fdays = calc_Fdays(Gdays, Edays, Ddays)
Sf = calc_Sf(Sk, Sg, r, Fdays)
Pg = calc_Pg(Se, Sg, Sf, Sk, S0)
Lo = calc_Lo(Cg, Co, Gdays, DdaysO, d_off)
# dmax = calc_dmax(Sf, Sk, Cg, Gdays)
# if(dmax > d){
#   print("Looks like stocking density is greater than what is theoretically sustainable.")
#   } else {print("Stocking density A-O-K!")}
# Productivity
ANPPt_max = calc_ANPPmax(RAIN, MAT, SAND)
ANPPt_est = calc_ANPPest(Se, Sg, Sf, Sk, S0)
BNPPt_est = calc_BNPPest(RAIN, MAT, ANPPt_est, Sk, S0, APCcorrection, DEPTH)
# SOC
PDSOCt = calc_PDSOCt(BNPPt_est, Sf, Lo, LIGCELL, FIRE)
DDSOCt = calc_DDSOCt(LIGCELL, Ddays, Cg, n, d, Lo)
SOCeq = calc_SOCeq(PDSOCt, DDSOCt, DEPTH, SAND, RAIN, Gdays, orig)
return(SOCeq)
}
calc_Fdays = function(Gdays, Edays, Ddays) {
Fdays = (Gdays - Edays - Ddays)
if(Fdays < 0){
stop("ERROR: Fdays must be greater than zero")
} else{
return(Fdays)
}
}
calc_Fdays(Gdays = 100, Edays = 0, Ddays = 0)
source(R)
source(C:\Users\jacob.penner\Documents\SNAPGRAZEr)
source(C:/Users/jacob.penner/Documents/SNAPGRAZEr)
source("C:/Users/jacob.penner/Documents/SNAPGRAZEr")
library(devtools)
install_github('SNAPGRAZEr', 'jpjazzcat')
?install_github
install_github('jpjazzcat/SNAPGRAZEr')
library(SNAPGRAZEr)
remove.packages("SNAPGRAZEr")
calc_Fdays()
calc_Fdays = function(Gdays, Edays, Ddays) {
Fdays = (Gdays - Edays - Ddays)
if(Fdays < 0){
stop("ERROR: Fdays must be greater than zero")
} else{
return(Fdays)
}
}
